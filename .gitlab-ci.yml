variables:
  GIT_SUBMODULE_STRATEGY: recursive
  HASKELL_OPTIM: "-O0"

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        HASKELL_OPTIM: "-O2"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS == null
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
      variables:
        HASKELL_OPTIM: "-O2"

stages:
  - prerequisites
  - check
  - build
  - test
  - push
  - submit

.docker:
  image:
    name: docker:cli
  tags:
    - dind
  before_script:
    - env
    - docker context list
    - df -h
    - apk add curl
    - if [[ $CI_SERVER_HOST == code.* ]]; then docker system prune -af; fi
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # --oci-worker-gc=false: see https://github.com/moby/buildkit/issues/4327#issuecomment-1772968980
    - docker buildx create --driver=docker-container --buildkitd-flags '--oci-worker-gc=false' --use
    - cp "${BLAZE_BINJA_LICENSE_FILE}" license.dat
    - '
      curl >BinaryNinja.zip -fsSL --proto "=https" --tlsv1.2
        --header "JOB-TOKEN: ${CI_JOB_TOKEN}"
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/binaryninja-distribution/3.5.4526/BinaryNinja.zip"
      || { ls -l BinaryNinja.zip >&2; head -c1000 BinaryNinja.zip >&2; exit 1; }
      '
  after_script:
    # See https://github.com/moby/buildkit/issues/4327#issuecomment-1772968980
    - docker buildx stop || true
    - docker buildx rm -f || true
  # Grr, we randomly get weird docker/buildx/buildkit/gitlab container registry issues
  retry: 2

base-images:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: prerequisites
  needs: []
  extends: .docker
  script:
    # --provenance=false: see https://gitlab.com/gitlab-org/gitlab/-/issues/388865#workaround
    - docker buildx build --push
        --pull
        --provenance=false
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/haskell:cache
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/haskell:latest
        --cache-to   type=registry,ref="${CI_REGISTRY_IMAGE}"/haskell:cache
        --target haskell
        -t "${CI_REGISTRY_IMAGE}"/haskell:pipeline-"${CI_PIPELINE_ID}"
        .

just-deps:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: prerequisites
  needs:
    - base-images
  extends: .docker
  script:
    - docker buildx build --push
        --pull
        --provenance=false
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/just-deps-binaryninja:cache
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/just-deps-binaryninja:latest
        --cache-to   type=registry,ref="${CI_REGISTRY_IMAGE}"/just-deps-binaryninja:cache
        --target just-deps-binaryninja
        -t "${CI_REGISTRY_IMAGE}"/just-deps-binaryninja:pipeline-"${CI_PIPELINE_ID}"
        .

# stage: check
include:
  project: 'blaze/filter-check'
  file: '/filtercheck.gitlab-ci.yml'
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/

hlint:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: check
  needs:
    - base-images
  image: ${CI_REGISTRY_IMAGE}/haskell:pipeline-${CI_PIPELINE_ID}
  script:
    - just hlint --color=always
  allow_failure: true

ghc-warnings:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: check
  needs:
    - just-deps
  image: ${CI_REGISTRY_IMAGE}/just-deps-binaryninja:pipeline-${CI_PIPELINE_ID}
  script:
    - stack clean
    - stack --color always build --test --no-run-tests --pedantic --fast
  allow_failure: true

build:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: build
  needs:
    - just-deps
  extends: .docker
  script:
    - docker buildx build --push
        --pull
        --provenance=false
        --target builder
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/builder:cache
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/builder:latest
        --cache-to   type=registry,ref="${CI_REGISTRY_IMAGE}"/builder:cache
        --build-arg OPTIM=${HASKELL_OPTIM}
        -t "${CI_REGISTRY_IMAGE}"/builder:pipeline-"${CI_PIPELINE_ID}"
        .
    - docker buildx build --push
        --pull
        --provenance=false
        --target builder-binaryninja
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/builder:cache
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/builder:latest
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/builder-binaryninja:cache
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/builder-binaryninja:latest
        --cache-to   type=registry,ref="${CI_REGISTRY_IMAGE}"/builder-binaryninja:cache
        --build-arg OPTIM=${HASKELL_OPTIM}
        -t "${CI_REGISTRY_IMAGE}"/builder-binaryninja:pipeline-"${CI_PIPELINE_ID}"
        .
    - docker buildx build --push
        --pull
        --provenance=false
        --target deliver
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}":cache
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}":latest
        --cache-to   type=registry,ref="${CI_REGISTRY_IMAGE}":cache
        -t "${CI_REGISTRY_IMAGE}":pipeline-"${CI_PIPELINE_ID}"
        .
    - docker buildx build --push
        --pull
        --provenance=false
        --target deliver-binaryninja
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/with-binaryninja:cache
        --cache-from type=registry,ref="${CI_REGISTRY_IMAGE}"/with-binaryninja:latest
        --cache-to   type=registry,ref="${CI_REGISTRY_IMAGE}"/with-binaryninja:cache
        -t "${CI_REGISTRY_IMAGE}"/with-binaryninja:pipeline-"${CI_PIPELINE_ID}"
        .

test:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: test
  needs:
    - build
  image: ${CI_REGISTRY_IMAGE}/builder:pipeline-${CI_PIPELINE_ID}
  script:
    - /out/run-tests --color

test-binaryninja:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: test
  needs:
    - build
  image: ${CI_REGISTRY_IMAGE}/builder-binaryninja:pipeline-${CI_PIPELINE_ID}
  script:
    - mkdir -p /root/.binaryninja
    - cp "${BLAZE_BINJA_LICENSE_FILE}" /root/.binaryninja/license.dat
    - /out/run-tests --color

push:latest:
  stage: push
  extends: .docker
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/ && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - test
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - images="${CI_REGISTRY_IMAGE}/haskell ${CI_REGISTRY_IMAGE}/builder ${CI_REGISTRY_IMAGE}/builder-binaryninja ${CI_REGISTRY_IMAGE}"
    - |-
      set -euxo pipefail
      for image in ${images}; do
        docker pull "${image}:pipeline-${CI_PIPELINE_ID}"
        docker tag  "${image}:pipeline-${CI_PIPELINE_ID}" "${image}:latest"
        docker push "${image}:latest"
      done

push:tag:
  stage: push
  extends: .docker
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/ && $CI_COMMIT_TAG
  needs:
    - test
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - images="${CI_REGISTRY_IMAGE}/haskell ${CI_REGISTRY_IMAGE}/hlint ${CI_REGISTRY_IMAGE}/builder ${CI_REGISTRY_IMAGE}"
    - |-
      set -euxo pipefail
      for image in ${images}; do
        docker pull "${image}:pipeline-${CI_PIPELINE_ID}"
        docker tag  "${image}:pipeline-${CI_PIPELINE_ID}" "${image}:tag-${CI_COMMIT_TAG}"
        docker push "${image}:tag-${CI_COMMIT_TAG}"
      done

cleanup:
  rules:
    - if: $CI_SERVER_HOST =~ /.*kududyn.*/
  stage: .post
  extends: .docker
  when: always
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - docker buildx rm blaze-platform-builder || true
    - images="${CI_REGISTRY_IMAGE}/haskell ${CI_REGISTRY_IMAGE}/hlint ${CI_REGISTRY_IMAGE}/builder ${CI_REGISTRY_IMAGE}"
    - |-
      set -euxo pipefail
      for image in ${images}; do
        docker image rm "${image}:pipeline-${CI_PIPELINE_ID}" || true
        if [ -n "${CI_COMMIT_TAG+x}" ]; then
          docker image rm "${image}:tag-${CI_COMMIT_TAG}" || true
        fi
      done


# Below are jobs that only run for integration:

pull-artifacts:
  rules:
    - if: $CI_SERVER_HOST =~ /^code\.*/
  stage: submit
  image: docker:cli
  artifacts:
    paths:
      - artifacts/artifacts/buildroot/rootfs
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${BLAZE_TARGET_ARTIFACT_IMAGE}"
    - mkdir artifacts-image artifacts
    - docker image save "${BLAZE_TARGET_ARTIFACT_IMAGE}" | tar -C artifacts-image -x
    - layer=$(jq -r '.[0].Layers[0]' artifacts-image/manifest.json)
    - echo "[*] Layer is at ${layer}"
    - tar -C artifacts -xf artifacts-image/"${layer}"
    - ( cd artifacts/artifacts/buildroot && mkdir rootfs && cpio -D rootfs -idmv <rootfs.cpio; )

test-submit:
  rules:
    - if: $CI_SERVER_HOST =~ /^code\.*/
  stage: submit
  needs: []
  image: ${CI_REGISTRY_IMAGE}
  # artifacts:
  #   paths:
  #     - zips
  script:
    - apt update
    - apt install -yq --no-install-recommends curl python3 python3-requests tar
    - 'curl -fsSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/target-artifacts/2024.10.25/rootfs.tar.gz" >rootfs.tar.gz'
    - tar -xf rootfs.tar.gz
    - cpio_hash=d4cef3d5
    - mkdir -p /root/.binaryninja
    - cp "${BLAZE_BINJA_LICENSE_FILE}" /root/.binaryninja/license.dat
    # - mkdir zips
    - python3 -u .docker/submit-findings.py "${CI_COMMIT_SHORT_SHA}" "${cpio_hash}" rootfs "${BLAZE_SUBMISSION_API_URL}" /test "${GITLAB_USER_NAME}" /out/bin/flint

submit:
  rules:
    - if: $CI_SERVER_HOST =~ /^code\.*/
  stage: submit
  needs: []
  when: manual
  image: ${CI_REGISTRY_IMAGE}
  # artifacts:
  #   paths:
  #     - zips
  script:
    - apt update
    - apt install -yq --no-install-recommends curl python3 python3-requests tar
    - 'curl -fsSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/target-artifacts/2024.10.25/rootfs.tar.gz" >rootfs.tar.gz'
    - tar -xf rootfs.tar.gz
    - cpio_hash=d4cef3d5
    - mkdir -p /root/.binaryninja
    - cp "${BLAZE_BINJA_LICENSE_FILE}" /root/.binaryninja/license.dat
    # - mkdir zips
    - python3 -u .docker/submit-findings.py "${CI_COMMIT_SHORT_SHA}" "${cpio_hash}" rootfs "${BLAZE_SUBMISSION_API_URL}" /submit "${GITLAB_USER_NAME}" /out/bin/flint
